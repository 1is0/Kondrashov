//---------------------------------------------------------------------------


#pragma hdrstop

#include "Unit2.h"
#include <string>


Node* Tree :: TreeCreate(std::string name,int data)
{
	Node* item = new Node;
	if(!item)
	{
		return NULL;
	}
	item->left = NULL;
	item->right = NULL;
	item->cvc = data;
	item->bank = name;

	return item;
}

Node* Tree :: TreeAdd(Node* tree,std::string bank,int cvc)
{
	if (!tree)
	{
		return TreeCreate(bank,cvc);
	}

	Node* root = tree;
	while (1)
	{
		if (root->cvc == cvc)
		{
			return tree;
		}

		if (cvc < root->cvc)
		{
			if (root->left)
			{
				root = root->left;
			}
			else
			{
				root->left = TreeCreate(bank,cvc);
				return tree;
			}
		}
		else
		{
			if (root->right)
			{
				root = root->right;
			}
			else
			{
				root->right = TreeCreate(bank,cvc);
				return tree;
			}
		}
	}
}


int Tree :: NodeCount(Node* root)
{
	if (root->left == NULL && root->right == NULL)
	{
		return 1;
	}
	int left=0, right=0;
	if (root->left != NULL)
	{
		left = NodeCount(root->left);
	}
	else
	{
		left = 0;
	}
	if (root->right != NULL)
	{
		right = NodeCount(root->right);
	}
	else
	{
		right = 0;
	}

	return left + right + 1;
}

int Tree ::  CountOnLevel(Node* root, int N)
{
	if (root == 0)
	{
		return 0;
	}
	if (N == 0)
	{
		return root->bank.length();
	}

	int left = CountOnLevel(root->left, N - 1);
	int right = CountOnLevel(root->right, N - 1);

	return left + right;
}

void Tree :: PrintTree(Node* temp, TTreeView *TreeView, int &index)
{
	int i = index;

	if(temp->left)
	{
		TreeView->Items->AddChild(TreeView->Items->Item[i], (temp->left->bank).c_str());
		PrintTree(temp->left, TreeView, ++index);
	}
	if(temp->right)
	{
		TreeView->Items->AddChild(TreeView->Items->Item[i], (temp->right->bank).c_str());
		PrintTree(temp->right, TreeView, ++index);
	}
}

void Tree :: ShowTree(TTreeView *TreeView)
{
	int index = 0;
	TreeView->Items->Clear();
	if(root)
	{
		TreeView->Items->Add(NULL, (root->bank).c_str());
		PrintTree(root, TreeView, index);
	}
}
//---------------------------------------------------------------------------

#pragma package(smart_init)
